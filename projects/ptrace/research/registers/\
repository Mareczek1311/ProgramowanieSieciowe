
#include <sys/ptrace.h>
#include <sys/types.h>
#include <sys/wait.h>
#include <unistd.h>
#include <stdio.h>
#include <sys/user.h>
#include <sys/reg.h>
#include <sys/syscall.h>
#include <string.h>
#include <stdio.h>


void reverse(char *str)
{   int i, j;
    char temp;
    for(i = 0, j = strlen(str) - 2;
        i <= j; ++i, --j) {
        temp = str[i];
        str[i] = str[j];
        str[j] = temp;
    }
    printf("%s \n", str);
}

int main() {
    pid_t pid;
    int status;
    struct user_regs_struct regs; // Used to access CPU registers
    char* str; // Assuming a maximum string length of 100 characters

    if ((pid = fork()) == 0) {
        ptrace(PTRACE_TRACEME, 0, 0, 0);
        execl("./reg", "reg", 0);
    } else {
        while (1) {
            wait(&status);

            if (WIFEXITED(status)) {
                break;
            }

            // Use PTRACE_GETREGS to access CPU registers
            ptrace(PTRACE_GETREGS, pid, 0, &regs);

            if (regs.orig_rax == SYS_write) {
                long data;
                data = ptrace(PTRACE_PEEKDATA, pid, regs.rdi, 0);

                // Copy the data from the traced process's memory
                memcpy(str, &data, sizeof(long));
                str[ptrace(PTRACE_PEEKUSER,
                                  child, RDX,
                                  NULL);] = '\0';
                reverse(str);
                printf("%s \n", str);
            }
            ptrace(PTRACE_CONT, pid, 0, 0);
        }
        printf("TA KURWA JUZ NIE DZIALA \n");
    }
    return 0;
}
